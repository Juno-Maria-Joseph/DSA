{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Juno-Maria-Joseph/DSA/blob/main/Time%20Complexity\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**<h1><center>Time Complexity</center></h1>**"
      ],
      "metadata": {
        "id": "RTwz1dah6XVw"
      },
      "id": "RTwz1dah6XVw"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### `Time Complexity is about how many operations any particular algorithm takes to execute and not about the time taken by the algorithm to execute.`"
      ],
      "metadata": {
        "id": "H3yqv78D69bl"
      },
      "id": "H3yqv78D69bl"
    },
    {
      "cell_type": "markdown",
      "source": [
        "- ### Popular Time Complexities are :\n",
        "####    1. O(n!)\n",
        "####    2. O(2^n)\n",
        "####    3. O(n^3)\n",
        "####    4. O(n^2)\n",
        "####    5. O(nlogn)\n",
        "####    6. O(n)\n",
        "####    7. O(logn)\n",
        "####    8. O(1)\n",
        "![](https://he-s3.s3.amazonaws.com/media/uploads/ece920b.png)"
      ],
      "metadata": {
        "id": "hprt4Yj3B1tb"
      },
      "id": "hprt4Yj3B1tb"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **`Q1. What is the Time Complexity of the below function?`**"
      ],
      "metadata": {
        "id": "Qm4mu2dD7Ge3"
      },
      "id": "Qm4mu2dD7Ge3"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "545accc1",
      "metadata": {
        "id": "545accc1"
      },
      "outputs": [],
      "source": [
        "def f1(arr:\"list\")->\"int\":\n",
        "    return 10\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ans1.** This function always returns the integer 10, regardless of the input list arr. It does not perform any operations on the list or its elements.\n",
        "\n",
        "Therefore, the time complexity is:\n",
        " **$\\mathcal{O}(1)$ [Constant Time]**\n"
      ],
      "metadata": {
        "id": "UAwnUdaDvVup"
      },
      "id": "UAwnUdaDvVup"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **`Q2. What is the Time Complexity of below function?`**"
      ],
      "metadata": {
        "id": "0nT5yefU8CHI"
      },
      "id": "0nT5yefU8CHI"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a716b882",
      "metadata": {
        "id": "a716b882"
      },
      "outputs": [],
      "source": [
        "def f2(arr:\"list\")->\"float\":\n",
        "    min_ = float(\"-inf\")\n",
        "    for i in arr:\n",
        "        if(min_>i):\n",
        "            min_ = i\n",
        "    return min_\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ans2.** The time complexity is **$\\mathcal{O}(n)$**, where **n** is the number of elements in arr."
      ],
      "metadata": {
        "id": "lb9NL3fsCXaE"
      },
      "id": "lb9NL3fsCXaE"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **`Q3. If length of arr1 is M and length of arr2 is N then what is the Time Complexity of the below function?`**"
      ],
      "metadata": {
        "id": "SkjOLrGe8a4p"
      },
      "id": "SkjOLrGe8a4p"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "efe53487",
      "metadata": {
        "id": "efe53487"
      },
      "outputs": [],
      "source": [
        "def f3(arr1:\"list\", arr2:\"list\")->\"float\":\n",
        "    ans = 0\n",
        "    for i in arr1:\n",
        "        for j in arr2:\n",
        "            ans += i*j\n",
        "    return ans\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ans3.** The outer loop runs **M** times and for each run of the outer loop, inner loop runs **N** times thus we are executing at total of **M*N** operations thus the Time Complexity is **$\\mathcal{O}(M*N)$**."
      ],
      "metadata": {
        "id": "JtFr-nZGDffm"
      },
      "id": "JtFr-nZGDffm"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **`Q4. #What is the Time Complexity of below function?`**"
      ],
      "metadata": {
        "id": "eNWLMQVn8_mh"
      },
      "id": "eNWLMQVn8_mh"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bcef2e38",
      "metadata": {
        "id": "bcef2e38"
      },
      "outputs": [],
      "source": [
        "def f4(n:\"int\",k:\"int\")->\"int\":\n",
        "    i=1\n",
        "    while i<n:\n",
        "        i = i*k\n",
        "    return i\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ans4.** The loop runs while **i < n** and **i** is multiplied by **k** each time.\n",
        "So the number of iterations **t** satisfies **𝑘^𝑡 ≥ 𝑛**\n",
        "leading to **𝑡 =log_𝑘 𝑛**.   \n",
        "\n",
        "Hence, the time complexity is\n",
        "**$\\mathcal{O}(log_𝑘 𝑛)$**."
      ],
      "metadata": {
        "id": "EanmXuyRGYe_"
      },
      "id": "EanmXuyRGYe_"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **`Q5. What is the Time Complexity of the below function?`**"
      ],
      "metadata": {
        "id": "tPqbbDTi-Lo6"
      },
      "id": "tPqbbDTi-Lo6"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c1f12c36",
      "metadata": {
        "id": "c1f12c36"
      },
      "outputs": [],
      "source": [
        "def f5(n:\"int\"):\n",
        "    for i in range(n):\n",
        "        for j in range(i):\n",
        "            pass\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ans5.** For each value of **i**, the inner loop runs i times.\n",
        "\n",
        "That means:\n",
        "\n",
        "When **i = 0**, **j** runs **0** times\n",
        "\n",
        "When **i = 1**, **j** runs **1** time\n",
        "\n",
        "When **i = 2**, **j** runs **2** times\n",
        "\n",
        "...\n",
        "\n",
        "When **i = n-1**, **j** runs **n-1** times\n",
        "\n",
        "So you’re adding up all these inner loop iterations:\n",
        "\n",
        "**0\n",
        "+\n",
        "1\n",
        "+\n",
        "2\n",
        "+\n",
        "⋯\n",
        "+\n",
        "(\n",
        "𝑛\n",
        "−\n",
        "1\n",
        ")**\n",
        "\n",
        "That’s a mathematical series called the triangular number, and the sum is:\n",
        "\n",
        "**$\\frac{n(n - 1)}{2}$**\n",
        "\n",
        "sum of n-1 natural numbers :  $\\frac{n(n - 1)}{2}$ =  $\\frac{n^2}{2}$ - $\\frac{n}{2}$.\n",
        "\n",
        "Since  \n",
        "$\\frac{n^2}{2}$**  \n",
        "is a weighter/higher term than\n",
        "**$\\frac{n}{2}$**\n",
        " the time complexity is:\n",
        "\n",
        "**$\\mathcal{O}\n",
        "(\n",
        "$𝑛^2$\n",
        ")$**\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "-dQIUaviOhVR"
      },
      "id": "-dQIUaviOhVR"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **`Q6. What is the Time Complexity of the below function?`**"
      ],
      "metadata": {
        "id": "QeP9UTOr_pud"
      },
      "id": "QeP9UTOr_pud"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "332e7243",
      "metadata": {
        "id": "332e7243"
      },
      "outputs": [],
      "source": [
        "def f6(n:\"int\"):\n",
        "    for i in range(n):\n",
        "        for j in range(n):\n",
        "            break\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " **Ans6.** Outer loop runs **n** times\n",
        "\n",
        "Inner loop runs just 1 time per outer loop (because of break)\n",
        "\n",
        "So the total number of times code is executed = n × 1 = n\n",
        "\n",
        "Time Complexity: **$\\mathcal{O}(𝑛)$**\n",
        "\n",
        "It’s linear time, not quadratic, because the break prevents the inner loop from fully running."
      ],
      "metadata": {
        "id": "3eh5P9HAs6Mu"
      },
      "id": "3eh5P9HAs6Mu"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **`Q7. What is the Time Complexity of the below function?`**"
      ],
      "metadata": {
        "id": "HACwIP6BAFcN"
      },
      "id": "HACwIP6BAFcN"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3326b1a2",
      "metadata": {
        "id": "3326b1a2"
      },
      "outputs": [],
      "source": [
        "def f7(n:\"int\"):\n",
        "    i,j=1,1\n",
        "    while i<n:\n",
        "        i = i*2\n",
        "        while j<n:\n",
        "            j = j*2\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ans7.** Outer Loop: while **$i < n$**.\n",
        "\n",
        "Starts with  $i = 1$\n",
        "\n",
        "Each time, $i = i * 2$  → this grows exponentially\n",
        "\n",
        "So $i$ takes values: 1, 2, 4, 8, 16, ..., up to < $n$\n",
        "\n",
        "This loop runs approximately:\n",
        "\n",
        "$log₂(n)$  times  $log₂(n)$\n",
        "\n",
        "\n",
        "Inner Loop: while $j < n$\n",
        "Starts with $j = 1$ (but notice: $j$ is never reset in the outer loop!)\n",
        "\n",
        "On the first iteration of the outer loop:\n",
        "\n",
        "Inner loop executes with $j = 1$, then $j = 2$, $j = 4$, ..., until $j ≥ n$\n",
        "\n",
        "Again, this runs ~ $log₂(n)$ times\n",
        "\n",
        "On the next iterations of the outer loop, $j$ is already $≥ n$, so:\n",
        "\n",
        "The inner loop doesn’t run again.\n",
        "\n",
        "________________________________\n",
        "\n",
        "Inner loop runs only once (during the first iteration of the outer loop)\n",
        "\n",
        "Takes **$O(log n)$** steps\n",
        "\n",
        "Outer loop runs **$O(log n)$** times, but only the first time does the inner loop actually execute\n",
        "\n",
        "So overall, the total time is: **$\\mathcal{O}(\\log n)$**\n"
      ],
      "metadata": {
        "id": "ChJeR8gRvw9x"
      },
      "id": "ChJeR8gRvw9x"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **`Q8. Below is the code for the very popular subset sum problem. The problem states that given an array of integers and a target, is there any subset of integers, which sums up to the target value? In the below code, we start from the very first element in the array and try to include it in our sum_So, What is the Time Complexity of the below function?`**"
      ],
      "metadata": {
        "id": "Tc24YPf4BCA1"
      },
      "id": "Tc24YPf4BCA1"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0763c148",
      "metadata": {
        "id": "0763c148"
      },
      "outputs": [],
      "source": [
        "target = 28\n",
        "def f8(arr:\"list\", i:\"int\", sum_:\"int\"):\n",
        "    n = len(arr)\n",
        "    if i==n:\n",
        "        return False\n",
        "    if target == sum_:\n",
        "        return True\n",
        "    sum_ += arr[i]\n",
        "    return f8(arr, i+1, sum_) or f8(arr, i+1, sum_-arr[i])\n",
        "\n",
        "f8(arr, 0, 0)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ans8.** For each element, we can either:\n",
        "\n",
        "*   Include it → solve subproblem with reduced target\n",
        "*   Exclude it → solve subproblem with same target\n",
        "\n",
        "So there are 2 choices for each of the **n** elements.\n",
        "\n",
        "The total number of subsets of an n-element array is $2^n$\n",
        "\n",
        "Time Complexity: $\\mathcal{O}(2^n)$"
      ],
      "metadata": {
        "id": "oR456B9v01Ld"
      },
      "id": "oR456B9v01Ld"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}